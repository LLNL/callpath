#!/usr/bin/env python
description="""\
This script lets you pipe output from tools that output module
and offset information like this:

  /usr/local/bin/some_executable(0x24328562)
  /usr/local/lib/some_library(0x24328562)

To file and line information generated by addr2line.
Pipe some text file to translate that contains module(offset) info
formatted like the above, and it output the same thing with
file/line info substituted for module(offset) pairs.
"""

import re, sys
from subprocess import *

# This is what a path to a library followed by an offset looks like.
expr = r'([^\s]+)\((0x[a-fA-F0-9]+)\)'

# Map from module name -> translator.  Each translator is a wrapper
# around an open pipe to an addr2line process, to which we send offsets
translators = {}

class Translator:
    """A translator is a read/write pipe to an addr2line process.
       If you write an address to it, it will read the file/line info
       from the process's output.

       You can use this like any other object.
    """
    def __init__(self, filename):
        self.filename = filename
        try:
            self.proc = Popen(["addr2line", "-f", "-e", filename], stdout=PIPE, stdin=PIPE)
        except:
            self.proc = None

    def kill(self):
        self.proc.terminate()

    def translate(self, addr):
        if self.proc:
            self.proc.stdin.write("%s\n" % addr)
            function = self.proc.stdout.readline().rstrip("\n")
            line = self.proc.stdout.readline().rstrip("\n")
            return "%s\t%s" % (function, line)
        else:
            return "??"



def translate(match):
    """Takes a match with groups representing module and offset.
       Returns file/line info from a translator.
    """
    module, offset = match.groups()
    if not module in translators:
        translators[module] = Translator(module)
    trans = translators[module]
    return trans.translate(offset)


if __name__ == "__main__":
    for line in sys.stdin:
        print re.sub(expr, translate, line),

    for t in translators:
        translators[t].kill()
