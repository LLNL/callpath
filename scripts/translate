#!/usr/bin/env python
##############################################################################
# Copyright (c) 2010-2014, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
#
# This file is part of the Callpath library.
# Written by Todd Gamblin, tgamblin@llnl.gov, All rights reserved.
# LLNL-CODE-647183
#
# For details, see https://github.com/scalability-llnl/callpath
#
# For details, see https://scalability-llnl.github.io/spack
# Please also see the LICENSE file for our notice and the LGPL.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License (as published by
# the Free Software Foundation) version 2.1 dated February 1999.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
# conditions of the GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##############################################################################
description="""\
This script lets you pipe output from tools that output module
and offset information like this:

  /usr/local/bin/some_executable(0x24328562)
  /usr/local/lib/some_library(0x24328562)

To file and line information generated by addr2line.
Pipe some text file to translate that contains module(offset) info
formatted like the above, and it output the same thing with
file/line info substituted for module(offset) pairs.
"""

import re, sys
from subprocess import *

# This is what a path to a library followed by an offset looks like.
expr = r'([^\s]+)\((0x[a-fA-F0-9]+)\)'

# Map from module name -> translator.  Each translator is a wrapper
# around an open pipe to an addr2line process, to which we send offsets
translators = {}

addr2line = "addr2line"

class Translator:
    """A translator is a read/write pipe to an addr2line process.
       If you write an address to it, it will read the file/line info
       from the process's output.

       You can use this like any other object.
    """
    def __init__(self, filename):
        self.filename = filename
        try:
            args = [addr2line]
            if '-C' in sys.argv: args.append('-C')
            args += ["-f", "-e", filename]
            self.proc = Popen(args, stdout=PIPE, stdin=PIPE)
        except:
            self.proc = None

    def kill(self):
        self.proc.terminate()

    def translate(self, addr):
        if self.proc:
            self.proc.stdin.write("%s\n" % addr)
            function = self.proc.stdout.readline().rstrip("\n")
            line = self.proc.stdout.readline().rstrip("\n")
            return "%s\t%s" % (function, line)
        else:
            return "??"



def translate(match):
    """Takes a match with groups representing module and offset.
       Returns file/line info from a translator.
    """
    module, offset = match.groups()
    if not module in translators:
        translators[module] = Translator(module)
    trans = translators[module]
    return trans.translate(offset)


if __name__ == "__main__":
    for line in sys.stdin:
        print re.sub(expr, translate, line),

    for t in translators:
        translators[t].kill()
